version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blockchain-explorer-postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-blockchain_explorer}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-blockchain_explorer}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - blockchain-explorer-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: blockchain-explorer-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - blockchain-explorer-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Service
  api:
    build:
      context: .
      dockerfile: ./packages/api/Dockerfile
    container_name: blockchain-explorer-api
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      API_PORT: ${API_PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-blockchain_explorer}
      DB_SYNCHRONIZE: ${DB_SYNCHRONIZE:-true}
      DB_LOGGING: ${DB_LOGGING:-false}
      BLOCKCHAIN_PROVIDER_URL: ${BLOCKCHAIN_PROVIDER_URL}
      BLOCKCHAIN_NETWORK_ID: ${BLOCKCHAIN_NETWORK_ID:-1}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
      RABBITMQ_EXCHANGE_NAME: ${RABBITMQ_EXCHANGE_NAME:-blockchain-events}
      RABBITMQ_QUEUE_BLOCK_PROCESSING: ${RABBITMQ_QUEUE_BLOCK_PROCESSING:-block-processing}
      RABBITMQ_QUEUE_TX_PROCESSING: ${RABBITMQ_QUEUE_TX_PROCESSING:-transaction-processing}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - ./logs/api:/app/logs
    command: node packages/api/dist/index.js
    restart: unless-stopped
    networks:
      - blockchain-explorer-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Indexer Service
  indexer:
    build:
      context: .
      dockerfile: ./packages/indexer/Dockerfile
    container_name: blockchain-explorer-indexer
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-blockchain_explorer}
      DB_SYNCHRONIZE: ${DB_SYNCHRONIZE:-true}
      DB_LOGGING: ${DB_LOGGING:-false}
      BLOCKCHAIN_PROVIDER_URL: ${BLOCKCHAIN_PROVIDER_URL}
      BLOCKCHAIN_NETWORK_ID: ${BLOCKCHAIN_NETWORK_ID:-1}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
      RABBITMQ_EXCHANGE_NAME: ${RABBITMQ_EXCHANGE_NAME:-blockchain-events}
      RABBITMQ_QUEUE_BLOCK_PROCESSING: ${RABBITMQ_QUEUE_BLOCK_PROCESSING:-block-processing}
      RABBITMQ_QUEUE_TX_PROCESSING: ${RABBITMQ_QUEUE_TX_PROCESSING:-transaction-processing}
    volumes:
      - ./logs/indexer:/app/logs
    command: node packages/indexer/dist/index.js
    restart: unless-stopped
    networks:
      - blockchain-explorer-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-data:
  rabbitmq-data:

networks:
  blockchain-explorer-network:
    driver: bridge